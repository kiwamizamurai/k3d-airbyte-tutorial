---
# Source: airbyte/charts/airbyte-api-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: airbyte-airbyte-api-server
    namespace: airbyte
    labels:
        app.kubernetes.io/name: airbyte-api-server
        app.kubernetes.io/instance: airbyte
        app.kubernetes.io/version: "0.53.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: airbyte-api-server
      app.kubernetes.io/instance: airbyte
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: airbyte-api-server
        app.kubernetes.io/instance: airbyte
    spec:
      serviceAccountName: airbyte-admin
      containers:
      - name: airbyte-api-server
        image: airbyte/airbyte-api-server:0.53.1
        imagePullPolicy: "IfNotPresent"
        env:
        - name: INTERNAL_API_HOST
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: CONFIG_API_HOST
        - name: AIRBYTE_API_HOST
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: AIRBYTE_API_HOST
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: AIRBYTE_VERSION
        - name: MICROMETER_METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: MICROMETER_METRICS_ENABLED
        - name: MICROMETER_METRICS_STATSD_FLAVOR
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: MICROMETER_METRICS_STATSD_FLAVOR
        - name: SEGMENT_WRITE_KEY
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: SEGMENT_WRITE_KEY
        - name: STATSD_HOST
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: STATSD_HOST
        - name: STATSD_PORT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: STATSD_PORT
        - name: TRACKING_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: TRACKING_STRATEGY

        # SECRETS MANAGER
        - name: SECRET_PERSISTENCE
          value: 
        # Values for AwsSecretsManager

        # Values for googleSecretManager secrets

        # Values for vault secrets

        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3

        ports:
        - name: http
          containerPort: 8006
          protocol: TCP
        resources:
          limits: {}
          requests: {}
        volumeMounts:
      volumes:
---
# Source: airbyte/charts/airbyte-api-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: airbyte-airbyte-api-server-svc
  namespace: airbyte
  labels:
    app.kubernetes.io/name: airbyte-api-server
    app.kubernetes.io/instance: airbyte
    app.kubernetes.io/version: "0.53.1"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: airbyte-api-server
    app.kubernetes.io/instance: airbyte
---
# Source: airbyte/charts/server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-server
  namespace: airbyte
  labels:
    app.kubernetes.io/name: server
    app.kubernetes.io/instance: airbyte
    app.kubernetes.io/version: "0.53.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: server
      app.kubernetes.io/instance: airbyte
  strategy:
    type: Recreate # Needed due to volume claims
  template:
    metadata:
      labels:
        app.kubernetes.io/name: server
        app.kubernetes.io/instance: airbyte
    spec:
      serviceAccountName: airbyte-admin
      containers:
      - name: airbyte-server-container
        image: airbyte/server:0.53.1
        imagePullPolicy: "IfNotPresent"
        env:
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: AIRBYTE_VERSION
        - name: AIRBYTE_EDITION
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: AIRBYTE_EDITION
        - name: AUTO_DETECT_SCHEMA
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: AUTO_DETECT_SCHEMA
        - name: CONFIG_ROOT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: CONFIG_ROOT
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: airbyte-airbyte-secrets
              key: DATABASE_PASSWORD
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: DATABASE_URL
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: airbyte-airbyte-secrets
              key: DATABASE_USER
        - name: LOG4J_CONFIGURATION_FILE
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: LOG4J_CONFIGURATION_FILE
        - name: MICROMETER_METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: MICROMETER_METRICS_ENABLED
        - name: MICROMETER_METRICS_STATSD_FLAVOR
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: MICROMETER_METRICS_STATSD_FLAVOR
        - name: SEGMENT_WRITE_KEY
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: SEGMENT_WRITE_KEY
        - name: STATSD_HOST
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: STATSD_HOST
        - name: STATSD_PORT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: STATSD_PORT
        - name: TRACKING_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: TRACKING_STRATEGY
        - name: WORKER_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: WORKER_ENVIRONMENT
        - name: WORKSPACE_ROOT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: WORKSPACE_ROOT
        - name: WEBAPP_URL
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: WEBAPP_URL
        - name: TEMPORAL_HOST
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: TEMPORAL_HOST
        - name: LOG_LEVEL
          value: "INFO"
        - name: JOB_MAIN_CONTAINER_CPU_REQUEST
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: JOB_MAIN_CONTAINER_CPU_REQUEST
        - name: JOB_MAIN_CONTAINER_CPU_LIMIT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: JOB_MAIN_CONTAINER_CPU_LIMIT
        - name: JOB_MAIN_CONTAINER_MEMORY_REQUEST
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: JOB_MAIN_CONTAINER_MEMORY_REQUEST
        - name: JOB_MAIN_CONTAINER_MEMORY_LIMIT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: JOB_MAIN_CONTAINER_MEMORY_LIMIT
        - name: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
        - name: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
        - name: KEYCLOAK_INTERNAL_HOST
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: KEYCLOAK_INTERNAL_HOST
        - name: AIRBYTE_API_AUTH_HEADER_NAME
          value: "X-Airbyte-Auth"
        - name: AIRBYTE_API_AUTH_HEADER_VALUE
          value: "Internal server"

        # SECRETS MANAGER
        - name: SECRET_PERSISTENCE
          value: 
        # Values for AwsSecretsManager

        # Values for googleSecretManager secrets

        # Values for vault secrets

        # STORAGE
        - name: STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: STORAGE_TYPE
        - name: STORAGE_BUCKET_LOG
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: STORAGE_BUCKET_LOG
        - name: STORAGE_BUCKET_STATE
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: STORAGE_BUCKET_STATE
        - name: STORAGE_BUCKET_WORKLOAD_OUTPUT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: STORAGE_BUCKET_WORKLOAD_OUTPUT

        # local

        # S3
        - name: S3_PATH_STYLE_ACCESS
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: S3_PATH_STYLE_ACCESS

        # MINIO # default behavior if none supplied is internal minio deployment
        # this is for the internally deployed minio
        - name: AWS_ACCESS_KEY_ID # todo: change to MINIO_ACCESS_KEY_ID, changes need to be pushed to the applications.yaml files
          valueFrom:
            secretKeyRef:
              name: airbyte-airbyte-secrets
              key: DEFAULT_MINIO_ACCESS_KEY
        - name: AWS_SECRET_ACCESS_KEY # todo: change to MINIO_SECRET_ACCESS_KEY, changes need to be pushed to the applications.yaml files
          valueFrom:
            secretKeyRef:
              name: airbyte-airbyte-secrets
              key: DEFAULT_MINIO_SECRET_KEY
        - name: MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: airbyte-airbyte-env
              key: MINIO_ENDPOINT

        #GCS
        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        resources:
          limits: {}
          requests: {}
        volumeMounts:
        - name: airbyte-yml-volume
          mountPath: /app/configs/airbyte.yml
          subPath: fileContents
          readOnly: true
      volumes:
      - name: airbyte-yml-volume
        secret:
          secretName: airbyte-airbyte-yml
---
# Source: airbyte/charts/server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: airbyte-airbyte-server-svc
  namespace: airbyte
  labels:
    app.kubernetes.io/name: server
    app.kubernetes.io/instance: airbyte
    app.kubernetes.io/version: "0.53.1"
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: server
    app.kubernetes.io/instance: airbyte
